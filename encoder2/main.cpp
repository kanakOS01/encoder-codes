#include <iostream>
#include <vector>
#define ________________________________________ int
#define ________________________________________________________________________________________________________ vector
std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> mirror_image(const std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>>& __________________________________________) {
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> _____;
    ________________________________________ __ = __________________________________________[0].size();
    for (const auto& ___ : __________________________________________) {
        std::________________________________________________________________________________________________________<________________________________________> ____;
        for (________________________________________ _________ = __ - 1; _________ >= 0; _________--) {
            ____.push_back(___[_________]);
        }
        _____.push_back(____);
    }
    return _____;
}
std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> _______________________(const std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>>& ______) {
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> ___;
    ________________________________________ rows = ______.size();
    ________________________________________ cols = ______[0].size();
    for (________________________________________ i = rows - 1; i >= 0; i--) {
        ___.push_back(______[i]);
    }
    return ___;
}
std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> _______(const std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>>& ____________________________________) {
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> ________________________;
    ________________________________________ rows = ____________________________________.size();
    ________________________________________ cols = ____________________________________[0].size();
    for (________________________________________ i = 0; i < rows; i++) {
        std::________________________________________________________________________________________________________<________________________________________> ______________________________;
        for (________________________________________ j = 0; j < cols; j++) {
            ______________________________.push_back(____________________________________[i][j] + 5);
        }
        ________________________.push_back(______________________________);
    }
    return ________________________;
}
void pr____________________(const std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>>& ____________________________________) {
    for (const auto& ________ : ____________________________________) {
        for (const auto& ____ : ________) {
            std::cout << ____ << " ";
        }
        std::cout << std::endl;
    }
}
________________________________________ main() {
    ________________________________________ r, c;
    std::cin >> r >> c;
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> ____________________________________(r, std::________________________________________________________________________________________________________<________________________________________>(c, 0));
    for (________________________________________ i = 0; i < r; i++) {
        for (________________________________________ j = 0; j < c; j++) {
            std::cin >> ____________________________________[i][j];
        }
    }
    std::cout << r << std::endl;
    std::cout << c << std::endl;
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> mirror = mirror_image(____________________________________);
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> water = _______________________(mirror);
    std::________________________________________________________________________________________________________<std::________________________________________________________________________________________________________<________________________________________>> final = _______(water);
    pr____________________(final);
    return 0;
}